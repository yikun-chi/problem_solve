class SparseVector:
    def __init__(self, nums: List[int]):
        self.entry_dict = dict()
        for idx, num in enumerate(nums):
            if num != 0:
                self.entry_dict[idx] = num
        

    # Return the dotProduct of two sparse vectors
    def dotProduct(self, vec: 'SparseVector') -> int:
        set1 = set(self.entry_dict.keys())
        set2 = set(vec.entry_dict.keys())
        operation_set = set1.intersection(set2)
        result = 0
        for idx in operation_set:
            result += self.entry_dict[idx] * vec.entry_dict[idx]
        return result

# Your SparseVector object will be instantiated and called as such:
# v1 = SparseVector(nums1)
# v2 = SparseVector(nums2)
# ans = v1.dotProduct(v2)


